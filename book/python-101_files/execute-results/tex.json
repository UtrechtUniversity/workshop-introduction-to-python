{
  "hash": "46a17d83e9c2636876d01d4e196efbb3",
  "result": {
    "markdown": "---\ntitle: \"Introduction to python\"\nexecute: \n  enabled: true\n  error: true\n  freeze: auto\n---\n\n# Introduction to python\n\n## Some simple statements\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n2+2\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n4\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nprint(\"Hello World\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello World\n```\n:::\n:::\n\n\n## Variables, values and their types\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ntext = \"Data Carpentry\"\nnumber = 42\npi_value = 3.141592653589793238462643383279502884197\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ntext\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'Data Carpentry'\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ntype(text)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nstr\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nnumber\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n42\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ntype(number)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nint\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\npi_value\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n3.141592653589793\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ntype(pi_value)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nfloat\n```\n:::\n:::\n\n\n## Output versus printing\nIn this example we first print the number and then call the variable again:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nprint(number)\nnumber\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n42\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n42\n```\n:::\n:::\n\n\nNow we do it the other way around:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nnumber\nprint(number)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n42\n```\n:::\n:::\n\n\nThe interpreter does not output the value of the variable unless it is the very last line in an input field. In general `print` is the only way to print output to the screen when you are not working in an interactive environment as Jupyter, but when you are working with scripts.\nRule of thumb: use output for quick checking while developing your Jupyter notebook, use print for all output that needs to be there while running a Jupyter notebook.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nsumming = 2 + 2\nmultiply = 6 * 7\npower = 2 ** 16\nmodulo = 13 % 5\n\nprint(\"Sum: \", summing)\nprint(\"Multiply: \", multiply)\nprint(\"Power: \", power)\nprint(\"Modulo: \", modulo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSum:  4\nMultiply:  42\nPower:  65536\nModulo:  3\n```\n:::\n:::\n\n\n## Logical values, operators and variables\nThere are two logical values, *true* and *false*. Inpython they are decoded as the values `True` and `False`. Note: here these two are really distinct values and no strings!\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nTrue\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nFalse\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nFalse\n```\n:::\n:::\n\n\nWith the logical operators `>`, `<`, `==`, `and`, `or` and  `not` we can now compare variables and create logical statements.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ncompare = 3 > 4\nprint(\"3 > 4 : \", compare)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3 > 4 :  False\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nnot_compare = not compare\nprint(\"not(3 > 4): \", not_compare)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnot(3 > 4):  True\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ncompare or not_compare\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ncompare and not_compare\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nTrue or False\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nTrue and False\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nTrue == compare\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nFalse\n```\n:::\n:::\n\n\n## The if-statement\nWe  saw how to create logical statements. In the if-clause we use these as conditional statements to carry some tasks.\n\n## Lists and Tuples\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nnumbers = [1, 2, 3]\nnumbers[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n1\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\ntype(numbers)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nlist\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nlen(numbers)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n3\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nnumbers[3]\n```\n\n::: {.cell-output .cell-output-error}\n```\nIndexError: list index out of range\n```\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nnumbers[-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n3\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nnumbers[2] == numbers[-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nwords = [\"cat\", \"dog\", \"horse\"]\nwords[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n'dog'\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ntype(words)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\nlist\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nif type(words) == type(numbers):\n    print(\"these variables have the same type!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthese variables have the same type!\n```\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nnewlist = [\"cat\", 1, \"horse\"]\n```\n:::\n\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\ntype(newlist[0])\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\nstr\n```\n:::\n:::\n\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\ntype(newlist[1])\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\nint\n```\n:::\n:::\n\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nnumbers.append(4)\nprint(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4]\n```\n:::\n:::\n\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nnumbers[2] = 333\nprint(numbers)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 333, 4]\n```\n:::\n:::\n\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\n# Tuples use parentheses\na_tuple = (1, 2, 3)\nanother_tuple = ('blue', 'green', 'red')\n\n# Note: lists use square brackets\na_list = [1, 2, 3]\n\n```\n:::\n\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\na_list[1] = 5\nprint(a_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 5, 3]\n```\n:::\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\na_tuple[2] = 5\nprint(a_tuple)\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: 'tuple' object does not support item assignment\n```\n:::\n:::\n\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\ntype(a_tuple)\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\ntuple\n```\n:::\n:::\n\n\n## Dictionaries\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nmy_dict = {'one': 'first', 'two': 'second'}\nmy_dict\n\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n{'one': 'first', 'two': 'second'}\n```\n:::\n:::\n\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nmy_dict['one']\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n'first'\n```\n:::\n:::\n\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nmy_dict['third'] = 'three'\nmy_dict\n\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n{'one': 'first', 'two': 'second', 'third': 'three'}\n```\n:::\n:::\n\n\n## For loops\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\nnumbers = [5, 6, 7]\n```\n:::\n\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nfor item in numbers:\n    print(item)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n6\n7\n```\n:::\n:::\n\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\nwords = [\"cat\", \"dog\", \"horse\"]\nfor index, item in enumerate(words):\n    print(index)\n    print(item)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\ncat\n1\ndog\n2\nhorse\n```\n:::\n:::\n\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nfor key, value in my_dict.items():\n    print(key, '->', value)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\none -> first\ntwo -> second\nthird -> three\n```\n:::\n:::\n\n\n## Exercises\n### Exercise 0\nTry to run this code. Why is there no output?\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nx = 6\napple = \"apple\"\n```\n:::\n\n\n### Exercise 1\n1. Calculate: One plus five divided by nine.\n2. Assign the result of the calculation to a variable.\n3. Test  if the result is larger than one.\n4. Round off the result to one decimal. Use the function `round`.\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\ns = (1+5)/9\nround(s, 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\n0.7\n```\n:::\n:::\n\n\n### Exercise 2\nPredict the results:\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\n5 == 5\nnot 3 > 2\nTrue == 'True'\nFalse < True\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\nTrue\n```\n:::\n:::\n\n\n### Exercise 3\nMeet Ann, Bob, Chloe, and Dan. \n1. Create a list with their names. Save the list as \"name\".\n\n2.  How old are Ann, Bob, Chloe, and Dan? You decide! Design a numeric list with their respective ages. Save it as \"age\".\n\n3.  What is their average age? (Use the function `sum` to sum up their cumulative ages, you can use `len(age)` to get the number of elements in a list)\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\nname = [\"Ann\", \"Bob\", \"Chloe\", \"Dan\"]\nage = [3, 30, 41, 2]\nsum(age)/len(age)\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\n19.0\n```\n:::\n:::\n\n\n### Exercise 4\n1.  Return only the first number in the list age.\n2.  Return the 2nd and 4th name in your list name.\n3.  Return only ages under 30 from your list age.\n4.  Return the name \"Chloe\" from the list name.\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\nage[0]\n[age[1], age[3]]\nnew_age=[]\nfor a in age:if a < 30:new_age.append(a)[n for n in name if n == \"Chloe\"] #or\nname[name.index(\"Chloe\")]\n```\n\n::: {.cell-output .cell-output-error}\n```\nSyntaxError: invalid syntax (4124803616.py, line 4)\n```\n:::\n:::\n\n\n### Exercise 5\nMake an if statement that tests if a number is even, and saves the classification in a variable called number_class.\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\nnumber = 5\nif number%2 == 0:\n    number_class = \"even\"\nelse:\n    number_class = \"odd\"\nprint(number, \"is\", number_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5 is odd\n```\n:::\n:::\n\n\n### Exercise 6\nTurn the if statement from the last exercise into a function. Let the user provide the value for number, and return the number_class.\n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\ndef even_or_odd(number):\n    if number%2 == 0:\n        number_class = \"even\"\n    else:\n        number_class = \"odd\"\n    return number_class\n```\n:::\n\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\nnumber = 5\nprint(number, \"is\", even_or_odd(number))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5 is odd\n```\n:::\n:::\n\n\n### Exercise 7 \nUse the function above to determine whether the numbers between 1 and 10 are even or odd.\n\n::: {.cell execution_count=55}\n``` {.python .cell-code}\nfor i in range(1, 11):\n    res = even_or_odd(i)\n    print(i, 'is', res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 is odd\n2 is even\n3 is odd\n4 is even\n5 is odd\n6 is even\n7 is odd\n8 is even\n9 is odd\n10 is even\n```\n:::\n:::\n\n\n\n",
    "supporting": [
      "python-101_files/figure-pdf"
    ],
    "filters": []
  }
}