{
  "hash": "6f1ae8764cc1aaa619151845197803c6",
  "result": {
    "markdown": "---\ntitle: \"Write your own Python function\"\nexecute:   \n  enabled: true\n  error: true\n  freeze: auto\n---\n\n## Functions\n\nWe have already seen some built-in functions: e.g. `print`, `type`, `len`. And we have seen special functions that belong to a variable (python object) like `my_dict.items()` and `my_list.append()`. There are more built-in functions e.g. for mathematical operations:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nsum(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnexpected exception formatting exception. Falling back to standard exception\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTraceback (most recent call last):\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/interactiveshell.py\", line 3460, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"/tmp/ipykernel_57439/1022242732.py\", line 1, in <module>\n    sum(numbers)\nNameError: name 'numbers' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/interactiveshell.py\", line 2057, in showtraceback\n    stb = self.InteractiveTB.structured_traceback(\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 1288, in structured_traceback\n    return FormattedTB.structured_traceback(\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 1177, in structured_traceback\n    return VerboseTB.structured_traceback(\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 1030, in structured_traceback\n    formatted_exception = self.format_exception_as_a_whole(etype, evalue, etb, number_of_lines_of_context,\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 935, in format_exception_as_a_whole\n    self.get_records(etb, number_of_lines_of_context, tb_offset) if etb else []\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 987, in get_records\n    style = stack_data.style_with_executing_node(style, self._tb_highlight)\n  File \"/home/jelle/.local/lib/python3.8/site-packages/stack_data/core.py\", line 455, in style_with_executing_node\n    class NewStyle(style):\n  File \"/usr/lib/python3/dist-packages/pygments/style.py\", line 91, in __new__\n    ndef[4] = colorformat(styledef[3:])\n  File \"/usr/lib/python3/dist-packages/pygments/style.py\", line 58, in colorformat\n    assert False, \"wrong color format %r\" % text\nAssertionError: wrong color format 'ansiyellow'\n```\n:::\n:::\n\n\nPlease refer to https://docs.python.org/3/library/functions.html for more built-in functions.\n\n### Writing own functions\nWe will now turn to writing own functions. When should you write your own function?  \n1. If the functionality is not covered by an out-of-the-box function like the built-in functions or another python  package  \n2. When code is getting pretty long, you can split it up into logical and reusable units  \n3. When code is often reused, e.g. you are reading in tens of spreadsheets and you need to clean them all in the same way. Instead of typing the line of code over and over again, it is more elegant and looks cleaner to create a function.  \n4. When code may be reused outside your current project. Scripts and the functions in a script can be imported in other scripts to be able to reuse them.  \n\nA big advantage of not having duplicate code inside your script or in multiple scripts is that when you want to make a slight modification to a function, you only have to do this modification in one place, instead of multiple lines that are doing more or less similar things.\n\nPython provides for this by letting us define things called ‘functions’. Let’s start by defining a function fahr_to_celsius that converts temperatures from Fahrenheit to Celsius:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef fahr_to_celsius(temp_fahrenheit):\n    temp_celsius = (temp_fahrenheit - 32) * (5/9)\n    return temp_celsius\n```\n:::\n\n\nThe function definition opens with the keyword `def` followed by the name of the function `fahr_to_celsius` and a parenthesized list of variables (in this case only one `temp_fahrenheit`). The body of the function — the statements that are executed when it runs — is indented below the definition line. The body concludes with a `return` keyword followed by the return value.\n\nWhen we call the function, the values we pass to it as arguments are assigned to the variables in the function definition so that we can use them inside the function. Inside the function, we use a return statement to send a result back to whoever asked for it.\n\nLet’s try running our function.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nfahr_to_celsius(98)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n36.66666666666667\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nprint('freezing point of water:', fahr_to_celsius(32), 'C')\nprint('boiling point of water:', fahr_to_celsius(212), 'C')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfreezing point of water: 0.0 C\nboiling point of water: 100.0 C\n```\n:::\n:::\n\n\nHere we directly passed a value to the function. We can also call the function with a variable:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\na = 0\nprint(fahr_to_celsius(a))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-17.77777777777778\n```\n:::\n:::\n\n\nWhat happens if you pass a variable name that is not defined yet?\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nprint(fahr_to_celsius(b))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnexpected exception formatting exception. Falling back to standard exception\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTraceback (most recent call last):\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/interactiveshell.py\", line 3460, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"/tmp/ipykernel_57439/1782297624.py\", line 1, in <module>\n    print(fahr_to_celsius(b))\nNameError: name 'b' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/interactiveshell.py\", line 2057, in showtraceback\n    stb = self.InteractiveTB.structured_traceback(\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 1288, in structured_traceback\n    return FormattedTB.structured_traceback(\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 1177, in structured_traceback\n    return VerboseTB.structured_traceback(\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 1030, in structured_traceback\n    formatted_exception = self.format_exception_as_a_whole(etype, evalue, etb, number_of_lines_of_context,\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 935, in format_exception_as_a_whole\n    self.get_records(etb, number_of_lines_of_context, tb_offset) if etb else []\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 987, in get_records\n    style = stack_data.style_with_executing_node(style, self._tb_highlight)\n  File \"/home/jelle/.local/lib/python3.8/site-packages/stack_data/core.py\", line 455, in style_with_executing_node\n    class NewStyle(style):\n  File \"/usr/lib/python3/dist-packages/pygments/style.py\", line 91, in __new__\n    ndef[4] = colorformat(styledef[3:])\n  File \"/usr/lib/python3/dist-packages/pygments/style.py\", line 58, in colorformat\n    assert False, \"wrong color format %r\" % text\nAssertionError: wrong color format 'ansiyellow'\n```\n:::\n:::\n\n\n## Exercises\n\nNow go back to your browser to morning_exercises.ipynb and continue with exercises 8 and 9.\n\nWhen you finished the exercises, continue to the [afternoon session](data-science-with-pandas-1.ipynb)\n\n",
    "supporting": [
      "Introduction_to_python_4_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}