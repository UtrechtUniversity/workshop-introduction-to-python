{
  "hash": "991ce56c9e6287731136471ff44cd590",
  "result": {
    "markdown": "---\ntitle: \"Data types, if-statements and for-loops \"\nexecute:   \n  enabled: true\n  error: true\n  freeze: auto\n---\n\n## The if-statement\n\nIf statements can be used to perform tasks only when a certain condition is met.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nnum = 101\n\nif num > 100:\n    print('number is greater than 100')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnumber is greater than 100\n```\n:::\n:::\n\n\nAs you can see, the line `print(...` starts with 4 spaces indentation.\nIn Python indentation is very important. Python uses indentation to determine which lines of code belong to what part of the code. This is mostly important when defining e.g. if-statements, for loops or functions. After the if condition, all lines with indentation are only performed when the if-condition is met.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nnum = 99\nif num > 100:\n    print('This line is only executed when num > 100')\n    print('This line is only executed when num > 100')\n    \n    print('This line is only executed when num > 100')\n    \nprint('This line is always executed')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis line is always executed\n```\n:::\n:::\n\n\nIt is also possible to specify a task that is performed when the condition is not met using `else` (note the use of indentation):\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nnum = 37\n\nif num > 100:\n    print('number is greater than 100')\nelse:\n    print('number is not greater than 100')\n\nprint('done')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnumber is not greater than 100\ndone\n```\n:::\n:::\n\n\nAn `if ... else` statement can be extended with (one or more) `elif` to specify more tasks that need to be performed on other conditions. These extended `if ... else` statements always start with `if` followed by (one or more) `elif`. When an `else` statement is included it is always the last statement. \n\n**Order matters**:\nThe statements (or conditions) are checked in order from top to bottom and only the task belonging to the first condition that is met is being performed. \n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nnum = -3\n\nif num > 0:\n    print(num, 'is positive')\nelif num == 0:\n    print(num, 'is zero')\nelse:\n    print(num, 'is negative')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-3 is negative\n```\n:::\n:::\n\n\nAlong with the `>` and `==` comparison operators that we have already used for comparing values in our logical expressions above, there are a few more options to know about:\n\n- \\>: greater than\n- \\<: less than\n- ==: equal to\n- !=: does not equal\n- \\>=: greater than or equal to\n- \\<=: less than or equal to\n\nWe can combine logical statements using `and` and `or` in more complex conditions in if statements.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nif (1 < 0) or (1 >= 0):\n    print('at least one the above logical statements is true')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nat least one the above logical statements is true\n```\n:::\n:::\n\n\nWhile `and` is only true if both parts are true\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nif (1 < 0) and (1 >= 0):\n    print('both tests are true')\nelse:\n    print('at least one of both tests is not true')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nat least one of both tests is not true\n```\n:::\n:::\n\n\n## Lists and Tuples\n\nUntil now we have worked with values and variables that hold one value or string. Now we will go into other data types that can combine multiple values or strings.\n\nLists are common data structures to hold a sequence of elements. We can create a list by putting values inside square brackets and separating the values with commas.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nnumbers = [1, 2, 3]\nprint(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3]\n```\n:::\n:::\n\n\nEach element can be accessed by an index. The index of the first element in a list in Python is 0 (in some other programming languages that would be 1).\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nprint(\"The first element in the list numbers is: \", numbers[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe first element in the list numbers is:  1\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ntype(numbers)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nlist\n```\n:::\n:::\n\n\nA total number of items in a list is called the 'length' and can be calculated using the `len()` function.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nlen(numbers)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n3\n```\n:::\n:::\n\n\nYou can do various things with lists. E.g. it is possible to sum the items in a list (when the items are all numbers)\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nprint(\"The sum of the items in the list is:\", sum(numbers))\nprint(\"The mean of the items in the list is:\", sum(numbers)/len(numbers))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe sum of the items in the list is: 6\nThe mean of the items in the list is: 2.0\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nnumbers[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnexpected exception formatting exception. Falling back to standard exception\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTraceback (most recent call last):\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/interactiveshell.py\", line 3460, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"/tmp/ipykernel_57370/1501072686.py\", line 1, in <module>\n    numbers[3]\nIndexError: list index out of range\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/interactiveshell.py\", line 2057, in showtraceback\n    stb = self.InteractiveTB.structured_traceback(\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 1288, in structured_traceback\n    return FormattedTB.structured_traceback(\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 1177, in structured_traceback\n    return VerboseTB.structured_traceback(\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 1030, in structured_traceback\n    formatted_exception = self.format_exception_as_a_whole(etype, evalue, etb, number_of_lines_of_context,\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 935, in format_exception_as_a_whole\n    self.get_records(etb, number_of_lines_of_context, tb_offset) if etb else []\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 987, in get_records\n    style = stack_data.style_with_executing_node(style, self._tb_highlight)\n  File \"/home/jelle/.local/lib/python3.8/site-packages/stack_data/core.py\", line 455, in style_with_executing_node\n    class NewStyle(style):\n  File \"/usr/lib/python3/dist-packages/pygments/style.py\", line 91, in __new__\n    ndef[4] = colorformat(styledef[3:])\n  File \"/usr/lib/python3/dist-packages/pygments/style.py\", line 58, in colorformat\n    assert False, \"wrong color format %r\" % text\nAssertionError: wrong color format 'ansiyellow'\n```\n:::\n:::\n\n\nThis error is expected. The list consists of three items, and the indices of those items are 0, 1 and 2.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nnumbers[-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n3\n```\n:::\n:::\n\n\nYes, we can use negative numbers as indices in Python. When we do so, the index -1 gives us the last element in the list, -2 the second to last, and so on. Because of this, numbers[2] and numbers[-1] point to the same element.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nnumbers[2] == numbers[-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nTrue\n```\n:::\n:::\n\n\nIt is also possible to combine strings in a list:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nwords = [\"cat\", \"dog\", \"horse\"]\nwords[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n'dog'\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ntype(words)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nlist\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nif type(words) == type(numbers):\n    print(\"these variables have the same type!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthese variables have the same type!\n```\n:::\n:::\n\n\nIt is also possible to combine values of different type (e.g. strings and integers) in a list\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nnewlist = [\"cat\", 1, \"horse\"]\n```\n:::\n\n\nThe type of the variable newlist is `list`. The elements of the list have their own data type:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ntype(newlist[0])\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nstr\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ntype(newlist[1])\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nint\n```\n:::\n:::\n\n\nIt is possible to add numbers to an existing list using `list.append()`\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nnumbers.append(4)\nprint(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4]\n```\n:::\n:::\n\n\nUsing the index of an item, you can replace the item in a list:\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nnumbers[2] = 333\nprint(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 333, 4]\n```\n:::\n:::\n\n\nA tuple is similar to a list in that it’s a sequence of elements. However, tuples can not be changed once created (they are “immutable”). Tuples are created by placing comma-separated values inside parentheses `()` (instead of square brackets `[]`).\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n# Tuples use parentheses\na_tuple = (1, 2, 3)\nanother_tuple = ('blue', 'green', 'red')\n\n# Note: lists use square brackets\na_list = [1, 2, 3]\n\n```\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\na_list[1] = 5\nprint(a_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 5, 3]\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\na_tuple[1] = 5\nprint(a_tuple)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnexpected exception formatting exception. Falling back to standard exception\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTraceback (most recent call last):\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/interactiveshell.py\", line 3460, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"/tmp/ipykernel_57370/2012623439.py\", line 1, in <module>\n    a_tuple[1] = 5\nTypeError: 'tuple' object does not support item assignment\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/interactiveshell.py\", line 2057, in showtraceback\n    stb = self.InteractiveTB.structured_traceback(\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 1288, in structured_traceback\n    return FormattedTB.structured_traceback(\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 1177, in structured_traceback\n    return VerboseTB.structured_traceback(\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 1030, in structured_traceback\n    formatted_exception = self.format_exception_as_a_whole(etype, evalue, etb, number_of_lines_of_context,\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 935, in format_exception_as_a_whole\n    self.get_records(etb, number_of_lines_of_context, tb_offset) if etb else []\n  File \"/home/jelle/.local/lib/python3.8/site-packages/IPython/core/ultratb.py\", line 987, in get_records\n    style = stack_data.style_with_executing_node(style, self._tb_highlight)\n  File \"/home/jelle/.local/lib/python3.8/site-packages/stack_data/core.py\", line 455, in style_with_executing_node\n    class NewStyle(style):\n  File \"/usr/lib/python3/dist-packages/pygments/style.py\", line 91, in __new__\n    ndef[4] = colorformat(styledef[3:])\n  File \"/usr/lib/python3/dist-packages/pygments/style.py\", line 58, in colorformat\n    assert False, \"wrong color format %r\" % text\nAssertionError: wrong color format 'ansiyellow'\n```\n:::\n:::\n\n\nHere we see that once the tuple is created, we cannot replace any of the values inside of the tuple.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ntype(a_tuple)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\ntuple\n```\n:::\n:::\n\n\n## Dictionaries\n\nA dictionary is another way to store multiple items into one object. In dictionaries, however, this is done with keys and values. This can be useful for several reasons, one example is to store model settings, parameters or variable values for multiple scenarios.\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nmy_dict = {'one': 'first', 'two': 'second'}\nmy_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n{'one': 'first', 'two': 'second'}\n```\n:::\n:::\n\n\nWe can access dictionary items by their key:\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nmy_dict['one']\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n'first'\n```\n:::\n:::\n\n\nAnd we can add new key-value pairs like that:\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nmy_dict['third'] = 'three'\nmy_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n{'one': 'first', 'two': 'second', 'third': 'three'}\n```\n:::\n:::\n\n\nDictionary items are key-value pairs. The keys are changeable and unique. The values are changable, but not necessarily unique.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nmy_dict['third'] = 'three'\nmy_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n{'one': 'first', 'two': 'second', 'third': 'three'}\n```\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nprint(\"Dictionary keys: \", my_dict.keys())\nprint(\"Dictionary values: \", my_dict.values())\nprint(\"Dictionary items (key, value): \", my_dict.items())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDictionary keys:  dict_keys(['one', 'two', 'third'])\nDictionary values:  dict_values(['first', 'second', 'three'])\nDictionary items (key, value):  dict_items([('one', 'first'), ('two', 'second'), ('third', 'three')])\n```\n:::\n:::\n\n\n## For loops\nLet's have a look at our list again. One way to print each number is to use three print statements:\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nnumbers = [5, 6, 7]\nprint(numbers[0])\nprint(numbers[1])\nprint(numbers[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n6\n7\n```\n:::\n:::\n\n\nA more efficient (less typing) and reliable way to print each element of a list is to loop over the list using a for loop:\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nfor item in numbers:\n    print(item)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n6\n7\n```\n:::\n:::\n\n\nThe improved version uses a for loop to repeat an operation — in this case, printing — once for each item in a sequence. Note that (similar to if statements) Python needs indentation (4 whitespaces) to determine which lines of code are part of the for loop.\n\nIf we want to also get the index, we can use the built-in function enumerate:\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nwords = [\"cat\", \"dog\", \"horse\"]\n\nfor index, item in enumerate(words):\n    print(index)\n    print(item)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\ncat\n1\ndog\n2\nhorse\n```\n:::\n:::\n\n\nFor loops can also be used with dictionaries. Let's take our dictionary from the previous section and inspect the dictionary items\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nfor item in my_dict.items():\n    print(item, \"is of type\", type(item))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n('one', 'first') is of type <class 'tuple'>\n('two', 'second') is of type <class 'tuple'>\n('third', 'three') is of type <class 'tuple'>\n```\n:::\n:::\n\n\nWe can extract the keys and values from the items directly in the `for` statement:\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nfor key, value in my_dict.items():\n    print(key, \"->\", value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\none -> first\ntwo -> second\nthird -> three\n```\n:::\n:::\n\n\n## Exercises\n\nNow go back to your browser to morning_exercises.ipynb and continue with exercises 4-7.\n\nWhen you finished the exercises, continue to chapter [Write your own Python function](Introduction_to_python_4.ipynb)\n\n",
    "supporting": [
      "Introduction_to_python_3_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}